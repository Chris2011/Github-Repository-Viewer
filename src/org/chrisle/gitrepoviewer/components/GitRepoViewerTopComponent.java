package org.chrisle.gitrepoviewer.components;

import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javafx.scene.input.MouseButton;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JPopupMenu;
import javax.swing.JWindow;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionReferences;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.chrisle.gitrepoviewer.components//RepoViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GitRepoViewerTopComponent",
        iconBase = "org/chrisle/gitrepoviewer/world.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.chrisle.gitrepoviewer.components.GitRepoViewerTopComponent")
@ActionReferences({
    @ActionReference(path = "Menu/Window" /*, position = 333 */),
    @ActionReference(path = "Shortcuts", name = "DO-G DO-R")
})
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GitRepoViewerAction",
        preferredID = "GitRepoViewerTopComponent"
)
@Messages({
    "CTL_GitRepoViewerAction=Git Repository Viewer",
    "CTL_GitRepoViewerTopComponent=Git Repository Viewer",
    "HINT_GitRepoViewerTopComponent=This is a Git Repository Viewer"
})
public final class GitRepoViewerTopComponent extends TopComponent {
    private static ImageIcon _rootNodeIcon;
    private static DefaultMutableTreeNode _hostTreeRootNode;
    private final DefaultTreeModel _hostTreeModel;
    private TreePath _treeClickedPath;
    private JPopupMenu _treeNodePopup;
    private AbstractAction _popupAbstractAction;

    public GitRepoViewerTopComponent() {
        initComponents();

        _rootNodeIcon = new ImageIcon("C:\\Projekte\\Netbeans Plugins\\Repository viewer\\src\\org\\chrisle\\gitrepoviewer\\world.png");
        _hostTreeRootNode = new DefaultMutableTreeNode(new IconData(_rootNodeIcon, "Repository Hosts - (No hosts added)"));
        _hostTreeModel = new DefaultTreeModel(_hostTreeRootNode);
        _treeNodePopup = new JPopupMenu();

        setName(Bundle.CTL_GitRepoViewerTopComponent());
        setToolTipText(Bundle.HINT_GitRepoViewerTopComponent());

        _treeNodePopup.setInvoker(_hostTree);

        _popupAbstractAction = new AbstractAction("Add host") {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (_treeClickedPath == null) {
                    return;
                }

                AddMethod();
            }
        };
    }

    private void AddMethod() {
        AddHostDialog hostsDialog = new AddHostDialog(null, true);
        hostsDialog.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _hostScrollPanel = new javax.swing.JScrollPane();
        _hostTree = new javax.swing.JTree();
        addHost = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        _hostTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        _hostScrollPanel.setViewportView(_hostTree);

        org.openide.awt.Mnemonics.setLocalizedText(addHost, org.openide.util.NbBundle.getMessage(GitRepoViewerTopComponent.class, "GitRepoViewerTopComponent.addHost.text")); // NOI18N
        addHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHostActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(GitRepoViewerTopComponent.class, "GitRepoViewerTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_hostScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addHost, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHost)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_hostScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHostActionPerformed
        AddMethod();
    }//GEN-LAST:event_addHostActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane _hostScrollPanel;
    private static javax.swing.JTree _hostTree;
    private javax.swing.JButton addHost;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        IconCellRenderer renderer = new IconCellRenderer();

        _hostTree.setRowHeight(20);
        _hostTree.setModel(_hostTreeModel);
        _hostTree.setShowsRootHandles(true);
        _hostTree.setCellRenderer(renderer);
        _hostTree.add(_treeNodePopup);
        _hostTree.addMouseListener(new PopupTrigger());
        _hostTree.setSelectionPath(_treeClickedPath);
        _hostTree.setFocusable(true);
        _hostTree.requestFocusInWindow();

        _treeNodePopup.add(_popupAbstractAction);
    }

    
    class PopupTrigger extends MouseAdapter {
        public void mouseReleased(MouseEvent e) {
          if (e.isPopupTrigger()) {
            int x = e.getX();
            int y = e.getY();
            TreePath path = _hostTree.getPathForLocation(x, y);
            if (path != null) {
//              if (_hostTree.isExpanded(path)) {
//                _popupAbstractAction.putValue(Action.NAME, "Collapse");
//              }
//              else {
//                _popupAbstractAction.putValue(Action.NAME, "Expand");
//              }

              _treeNodePopup.show(_hostTree, x, y);
              _treeClickedPath = path;
            }
          }
        }
      }

    public static void addTreeNode(MutableTreeNode host) {
        _hostTreeRootNode.add(host);
        _hostTreeRootNode.setUserObject(new IconData(_rootNodeIcon, "Repository Hosts (" + _hostTreeRootNode.getChildCount() + ")"));

        _hostTree.expandRow(0);
        _hostTree.updateUI();
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
